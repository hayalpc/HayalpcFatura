// <auto-generated />
using System;
using Hayalpc.Fatura.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace MigrationTool.Migrations
{
    [DbContext(typeof(HpDbContext))]
    [Migration("20210120235450_MigUp1")]
    partial class MigUp1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Hayalpc.Fatura.Data.Models.BlobFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AccountKey")
                        .IsRequired()
                        .HasColumnName("account_key")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnName("account_name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("BlobUrl")
                        .IsRequired()
                        .HasColumnName("blob_url")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnName("create_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("CreateUserId")
                        .HasColumnName("create_user_id")
                        .HasColumnType("bigint");

                    b.Property<long>("DataId")
                        .HasColumnName("data_id")
                        .HasColumnType("bigint");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnName("file_name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("integer");

                    b.Property<Guid>("Token")
                        .HasColumnName("token")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnName("type")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnName("update_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnName("update_user_id")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("pk_blob_files");

                    b.ToTable("blob_files");
                });

            modelBuilder.Entity("Hayalpc.Fatura.Data.Models.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("code")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnName("create_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("CreateUserId")
                        .HasColumnName("create_user_id")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Logo")
                        .HasColumnName("logo")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnName("update_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnName("update_user_id")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("pk_categories");

                    b.ToTable("categories","parameter");
                });

            modelBuilder.Entity("Hayalpc.Fatura.Data.Models.City", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("CountryId")
                        .HasColumnName("country_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnName("create_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("CreateUserId")
                        .HasColumnName("create_user_id")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnName("update_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnName("update_user_id")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("pk_city");

                    b.ToTable("city","parameter");
                });

            modelBuilder.Entity("Hayalpc.Fatura.Data.Models.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnName("create_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("CreateUserId")
                        .HasColumnName("create_user_id")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnName("update_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnName("update_user_id")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("pk_country");

                    b.ToTable("country","parameter");
                });

            modelBuilder.Entity("Hayalpc.Fatura.Data.Models.Dealer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Channel")
                        .HasColumnName("channel")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<long>("Code")
                        .HasColumnName("code")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnName("create_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("CreateUserId")
                        .HasColumnName("create_user_id")
                        .HasColumnType("bigint");

                    b.Property<bool>("Default")
                        .HasColumnName("default")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Logo")
                        .HasColumnName("logo")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("PersonAccountName")
                        .HasColumnName("person_account_name")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("PersonAddress")
                        .HasColumnName("person_address")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("PersonEmail")
                        .HasColumnName("person_email")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("PersonIban")
                        .HasColumnName("person_ıban")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("PersonName")
                        .HasColumnName("person_name")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("PersonPhone")
                        .HasColumnName("person_phone")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("PersonSurname")
                        .HasColumnName("person_surname")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("PersonTckNo")
                        .HasColumnName("person_tck_no")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<int>("Priorty")
                        .HasColumnName("priorty")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnName("update_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnName("update_user_id")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("pk_dealers");

                    b.ToTable("dealers");
                });

            modelBuilder.Entity("Hayalpc.Fatura.Data.Models.District", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("CityId")
                        .HasColumnName("city_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnName("create_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("CreateUserId")
                        .HasColumnName("create_user_id")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnName("update_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnName("update_user_id")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("pk_district");

                    b.ToTable("district","parameter");
                });

            modelBuilder.Entity("Hayalpc.Fatura.Data.Models.Institution", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("CategoryId")
                        .HasColumnName("category_id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("code")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnName("create_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("CreateUserId")
                        .HasColumnName("create_user_id")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Logo")
                        .HasColumnName("logo")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("Placeholder")
                        .HasColumnName("placeholder")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("Reverse")
                        .HasColumnName("reverse")
                        .HasColumnType("boolean");

                    b.Property<string>("Type")
                        .HasColumnName("type")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnName("update_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnName("update_user_id")
                        .HasColumnType("bigint");

                    b.Property<string>("ValidationText")
                        .HasColumnName("validation_text")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id")
                        .HasName("pk_institutions");

                    b.ToTable("institutions");
                });

            modelBuilder.Entity("Hayalpc.Fatura.Data.Models.Invoice", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnName("amount")
                        .HasColumnType("numeric");

                    b.Property<long>("CategoryId")
                        .HasColumnName("category_id")
                        .HasColumnType("bigint");

                    b.Property<long>("CategoryName")
                        .HasColumnName("category_name")
                        .HasColumnType("bigint")
                        .HasMaxLength(128);

                    b.Property<string>("Channel")
                        .IsRequired()
                        .HasColumnName("channel")
                        .HasColumnType("character varying(16)")
                        .HasMaxLength(16);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnName("create_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("CreateUserId")
                        .HasColumnName("create_user_id")
                        .HasColumnType("bigint");

                    b.Property<long>("DealerId")
                        .HasColumnName("dealer_id")
                        .HasColumnType("bigint");

                    b.Property<decimal>("DelayAmount")
                        .HasColumnName("delay_amount")
                        .HasColumnType("numeric");

                    b.Property<string>("ErrDesc")
                        .HasColumnName("err_desc")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Error")
                        .HasColumnName("error")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<decimal>("Fee")
                        .HasColumnName("fee")
                        .HasColumnType("numeric");

                    b.Property<long>("InstitutionId")
                        .HasColumnName("institution_id")
                        .HasColumnType("bigint");

                    b.Property<string>("InstitutionName")
                        .IsRequired()
                        .HasColumnName("institution_name")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("InstitutionTransId")
                        .HasColumnName("institution_trans_id")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("InvoiceDate")
                        .IsRequired()
                        .HasColumnName("invoice_date")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("InvoiceNo")
                        .IsRequired()
                        .HasColumnName("invoice_no")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("InvoiceOwner")
                        .IsRequired()
                        .HasColumnName("invoice_owner")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<long>("PaymentId")
                        .HasColumnName("payment_id")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("integer");

                    b.Property<string>("SubscriberNo")
                        .IsRequired()
                        .HasColumnName("subscriber_no")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<Guid>("Token")
                        .HasColumnName("token")
                        .HasColumnType("uuid")
                        .HasMaxLength(64);

                    b.Property<decimal>("TotalAmount")
                        .HasColumnName("total_amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnName("update_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnName("update_user_id")
                        .HasColumnType("bigint");

                    b.Property<string>("UserIp")
                        .IsRequired()
                        .HasColumnName("user_ip")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("Value1")
                        .HasColumnName("value1")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value2")
                        .HasColumnName("value2")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value3")
                        .HasColumnName("value3")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.HasKey("Id")
                        .HasName("pk_invoices");

                    b.ToTable("invoices");
                });

            modelBuilder.Entity("Hayalpc.Fatura.Data.Models.InvoicePayment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnName("amount")
                        .HasColumnType("numeric");

                    b.Property<long>("CategoryId")
                        .HasColumnName("category_id")
                        .HasColumnType("bigint");

                    b.Property<long>("CategoryName")
                        .HasColumnName("category_name")
                        .HasColumnType("bigint")
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnName("create_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("CreateUserId")
                        .HasColumnName("create_user_id")
                        .HasColumnType("bigint");

                    b.Property<long>("DealerId")
                        .HasColumnName("dealer_id")
                        .HasColumnType("bigint");

                    b.Property<long>("DealerName")
                        .HasColumnName("dealer_name")
                        .HasColumnType("bigint")
                        .HasMaxLength(128);

                    b.Property<decimal>("DelayAmount")
                        .HasColumnName("delay_amount")
                        .HasColumnType("numeric");

                    b.Property<string>("ErrDesc")
                        .HasColumnName("err_desc")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Error")
                        .HasColumnName("error")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnName("expire_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("Fee")
                        .HasColumnName("fee")
                        .HasColumnType("numeric");

                    b.Property<long>("InstitutionId")
                        .HasColumnName("institution_id")
                        .HasColumnType("bigint");

                    b.Property<string>("InstitutionName")
                        .IsRequired()
                        .HasColumnName("institution_name")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("MaskedData")
                        .HasColumnName("masked_data")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("MaskedData2")
                        .HasColumnName("masked_data2")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("MaskedData3")
                        .HasColumnName("masked_data3")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("PaymentChannel")
                        .IsRequired()
                        .HasColumnName("payment_channel")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnName("payment_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnName("payment_method")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("RemoteOrder")
                        .HasColumnName("remote_order")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("RemoteTransId")
                        .HasColumnName("institution_trans_id")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("SubscriberNo")
                        .IsRequired()
                        .HasColumnName("subscriber_no")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<Guid>("Token")
                        .HasColumnName("token")
                        .HasColumnType("uuid")
                        .HasMaxLength(64);

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnName("update_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnName("update_user_id")
                        .HasColumnType("bigint");

                    b.Property<string>("UserIp")
                        .IsRequired()
                        .HasColumnName("user_ip")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.HasKey("Id")
                        .HasName("pk_payments");

                    b.ToTable("payments");
                });

            modelBuilder.Entity("Hayalpc.Fatura.Data.Models.ResetPassword", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnName("create_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("CreateUserId")
                        .HasColumnName("create_user_id")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("integer");

                    b.Property<Guid>("Token")
                        .HasColumnName("token")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnName("update_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnName("update_user_id")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("pk_reset_passwords");

                    b.ToTable("reset_passwords","panel");
                });

            modelBuilder.Entity("Hayalpc.Fatura.Data.Models.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnName("create_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("CreateUserId")
                        .HasColumnName("create_user_id")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnName("type")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnName("update_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnName("update_user_id")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.ToTable("roles","panel");
                });

            modelBuilder.Entity("Hayalpc.Fatura.Data.Models.RolePermission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Action")
                        .HasColumnName("action")
                        .HasColumnType("text");

                    b.Property<string>("Controller")
                        .HasColumnName("controller")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnName("create_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("CreateUserId")
                        .HasColumnName("create_user_id")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<string>("Icon")
                        .HasColumnName("icon")
                        .HasColumnType("text");

                    b.Property<bool>("IsMenu")
                        .HasColumnName("is_menu")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnName("order")
                        .HasColumnType("integer");

                    b.Property<long>("RoleId")
                        .HasColumnName("role_id")
                        .HasColumnType("bigint");

                    b.Property<long>("RolePermissionId")
                        .HasColumnName("role_permission_id")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnName("update_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnName("update_user_id")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("pk_role_permissions");

                    b.ToTable("role_permissions","panel");
                });

            modelBuilder.Entity("Hayalpc.Fatura.Data.Models.TableDefinition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ActionType")
                        .HasColumnName("action_type")
                        .HasColumnType("integer");

                    b.Property<string>("Assembly")
                        .IsRequired()
                        .HasColumnName("assembly")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnName("create_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("CreateUserId")
                        .HasColumnName("create_user_id")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnName("model_name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Namespace")
                        .IsRequired()
                        .HasColumnName("namespace")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<long?>("RoleId1")
                        .HasColumnName("role_id1")
                        .HasColumnType("bigint");

                    b.Property<long?>("RoleId2")
                        .HasColumnName("role_id2")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnName("update_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnName("update_user_id")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("pk_table_definitions");

                    b.ToTable("table_definitions","tracking");
                });

            modelBuilder.Entity("Hayalpc.Fatura.Data.Models.TableHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ActionDetail")
                        .IsRequired()
                        .HasColumnName("action_detail")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<int>("ActionType")
                        .HasColumnName("action_type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnName("create_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("CreateUserId")
                        .HasColumnName("create_user_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("DataId")
                        .HasColumnName("data_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("DealerId")
                        .HasColumnName("dealer_id")
                        .HasColumnType("bigint");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnName("model_name")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("NewData")
                        .HasColumnName("new_data")
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnName("note")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("OldData")
                        .HasColumnName("old_data")
                        .HasColumnType("text");

                    b.Property<long?>("RoleId1")
                        .HasColumnName("role_id1")
                        .HasColumnType("bigint");

                    b.Property<long?>("RoleId2")
                        .HasColumnName("role_id2")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("integer");

                    b.Property<long>("TableDefinitionId")
                        .HasColumnName("table_definition_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnName("update_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnName("update_user_id")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("pk_table_histories");

                    b.ToTable("table_histories","tracking");
                });

            modelBuilder.Entity("Hayalpc.Fatura.Data.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnName("create_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("CreateUserId")
                        .HasColumnName("create_user_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("DealerId")
                        .HasColumnName("dealer_id")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("ImagePath")
                        .HasColumnName("image_path")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnName("last_login_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("LastPasswordChangeDate")
                        .HasColumnName("last_password_change_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastSessionId")
                        .HasColumnName("last_session_id")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<DateTime?>("LastWrongLoginTryDate")
                        .HasColumnName("last_wrong_login_try_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("Password")
                        .HasColumnName("password")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnName("phone")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("integer");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnName("surname")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<int>("Type")
                        .HasColumnName("type")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnName("update_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnName("update_user_id")
                        .HasColumnType("bigint");

                    b.Property<int>("WrongLoginTryCount")
                        .HasColumnName("wrong_login_try_count")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users","panel");
                });

            modelBuilder.Entity("Hayalpc.Fatura.Data.Models.UserBulletin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasColumnName("action_type")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnName("create_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("CreateUserId")
                        .HasColumnName("create_user_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("DealerId")
                        .HasColumnName("dealer_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnName("expire_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Language")
                        .HasColumnName("language")
                        .HasColumnType("character varying(8)")
                        .HasMaxLength(8);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnName("message")
                        .HasColumnType("character varying(1024)")
                        .HasMaxLength(1024);

                    b.Property<DateTime?>("ReadDate")
                        .HasColumnName("read_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("RoleGroupId")
                        .HasColumnName("role_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartDate")
                        .HasColumnName("start_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<int>("Type")
                        .HasColumnName("type")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnName("update_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnName("update_user_id")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("pk_user_bulletins");

                    b.ToTable("user_bulletins","tracking");
                });

            modelBuilder.Entity("Hayalpc.Fatura.Data.Models.UserLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasColumnName("action_type")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnName("create_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("CreateUserId")
                        .HasColumnName("create_user_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("DealerId")
                        .HasColumnName("dealer_id")
                        .HasColumnType("bigint");

                    b.Property<string>("Note")
                        .HasColumnName("note")
                        .HasColumnType("character varying(512)")
                        .HasMaxLength(512);

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnName("update_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnName("update_user_id")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("bigint");

                    b.Property<string>("UserIp")
                        .HasColumnName("user_ip")
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32);

                    b.HasKey("Id")
                        .HasName("pk_user_logs");

                    b.ToTable("user_logs","tracking");
                });

            modelBuilder.Entity("Hayalpc.Fatura.Data.Models.UserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnName("create_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("CreateUserId")
                        .HasColumnName("create_user_id")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnName("role_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnName("update_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnName("update_user_id")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("pk_user_roles");

                    b.HasIndex("RoleId")
                        .HasName("ıx_user_roles_role_id");

                    b.ToTable("user_roles","panel");
                });

            modelBuilder.Entity("Hayalpc.Fatura.Data.Models.UserRole", b =>
                {
                    b.HasOne("Hayalpc.Fatura.Data.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_user_roles_roles_role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
